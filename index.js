// index.js
require('dotenv').config();                // .env: BOT_TOKEN, DATABASE_URL, BASE_URL, ADMIN_ID

const express     = require('express');
const path        = require('path');
const TelegramBot = require('node-telegram-bot-api');
const { Pool }    = require('pg');

const PORT   = process.env.PORT      || 10000;
const URL    = process.env.BASE_URL;          // –Ω–∞–ø—Ä–∏–º–µ—Ä https://your-app.onrender.com
const TOKEN  = process.env.BOT_TOKEN;
const DB_URL = process.env.DATABASE_URL;      // —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Render-Postgres
const ADMIN_ID = Number(process.env.ADMIN_ID);// –í–∞—à Telegram-ID

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL
const pool = new Pool({
  connectionString: DB_URL,
  ssl: { rejectUnauthorized: false }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express
const app = express();
app.use(express.json());
app.use('/shop', express.static(path.join(__dirname, 'public')));

// REST: –≤—ã–¥–∞—ë–º —Ç–æ–≤–∞—Ä—ã —Å —É—á—ë—Ç–æ–º –≤–∏–¥–∏–º–æ—Å—Ç–∏
app.get('/api/products', async (_req, res) => {
  try {
    const { rows } = await pool.query(`
      SELECT article, name, size, price_rub, photo_file_id 
        FROM products
       WHERE is_public
       ORDER BY name
    `);
    res.json(rows);
  } catch (e) {
    console.error('[api/products]', e);
    res.status(500).json({ error: 'db_error' });
  }
});

// –õ–æ–≥–∏—Ä—É–µ–º ¬´–∑–∞–∫–∞–∑—ã¬ª
app.post('/api/order', (req, res) => {
  console.log('[ORDER]', req.body);
  res.sendStatus(200);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot (webhook)
const bot = new TelegramBot(TOKEN, { polling: false });
bot.setWebHook(`${URL}/bot${TOKEN}`);
app.post(`/bot${TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// /start ‚Äî –≥–æ—Å—Ç–∏ + –∞–¥–º–∏–Ω¬≠–∫–Ω–æ–ø–∫–∞
bot.onText(/\/start/, msg => {
  const keyboard = [
    [{ text: '–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω üõçÔ∏è', web_app: { url: `${URL}/shop` } }]
  ];
  if (msg.from.id === ADMIN_ID) {
    keyboard.push([{ text: '‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'ADMIN_MENU' }]);
  }
  bot.sendMessage(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', {
    reply_markup: { inline_keyboard: keyboard }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
bot.on('callback_query', async q => {
  const id = q.from.id;
  if (id !== ADMIN_ID) return;

  await bot.answerCallbackQuery(q.id);
  if (q.data === 'ADMIN_MENU') {
    return bot.sendMessage(id, 'üõ† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É', callback_data: 'ADMIN_SET_PRICE' }],
          [{ text: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'ADMIN_SET_PHOTO' }]
        ]
      }
    });
  }

  if (q.data === 'ADMIN_SET_PRICE') {
    return bot.sendMessage(id, '‚ùì –í–≤–µ–¥–∏—Ç–µ: <–∞—Ä—Ç–∏–∫—É–ª> <–Ω–æ–≤–∞—è_—Ü–µ–Ω–∞>', {
      reply_markup: { remove_keyboard: true }
    });
  }

  if (q.data === 'ADMIN_SET_PHOTO') {
    return bot.sendMessage(
      id,
      '‚ùì –í–ø–∏—à–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª, –∞ –∑–∞—Ç–µ–º _–æ—Ç–≤–µ—Ç—å—Ç–µ_ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π.',
      { parse_mode: 'Markdown', reply_markup: { remove_keyboard: true } }
    );
  }
});

// –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
bot.on('message', async msg => {
  const id = msg.from.id;
  if (id !== ADMIN_ID) return;

  // 1) –°–º–µ–Ω–∞ —Ü–µ–Ω—ã: ¬´art123 1199¬ª
  if (msg.text && /^\S+\s+\d+$/.test(msg.text.trim())) {
    const [article, priceStr] = msg.text.trim().split(/\s+/);
    const price = Number(priceStr);
    await pool.query(
      'UPDATE products SET price_rub = $1 WHERE article = $2',
      [price, article]
    );
    return bot.sendMessage(id, `‚úÖ –¶–µ–Ω–∞ ¬´${article}¬ª = ${price} ‚ÇΩ`);
  }

  // 2) –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º)
  if (msg.photo && msg.reply_to_message && msg.reply_to_message.text) {
    const m = msg.reply_to_message.text.match(/(\S+)/);
    const article = m ? m[1] : null;
    if (!article) {
      return bot.sendMessage(id, '‚ùóÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∞—Ä—Ç–∏–∫—É–ª –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.');
    }
    const fileId = msg.photo.slice(-1)[0].file_id;
    await pool.query(
      'UPDATE products SET photo_file_id = $1 WHERE article = $2',
      [fileId, article]
    );
    return bot.sendMessage(id, `‚úÖ –§–æ—Ç–æ –¥–ª—è ¬´${article}¬ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.`);
  }
});

// –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => console.log(`‚úÖ Server & Bot listening on :${PORT}`));
