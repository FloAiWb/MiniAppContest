require('dotenv').config();                // .env: BOT_TOKEN, DATABASE_URL, BASE_URL

const express     = require('express');
const path        = require('path');
const TelegramBot = require('node-telegram-bot-api');
const { Pool }    = require('pg');

const PORT  = process.env.PORT      || 10000;
const URL   = process.env.BASE_URL;        // https://<your-app>.onrender.com
const TOKEN = process.env.BOT_TOKEN;
const DB    = process.env.DATABASE_URL;    // —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Render-Postgres

/* ----------  PostgreSQL  ---------- */
const pool = new Pool({
  connectionString: DB,
  ssl: { rejectUnauthorized: false }
});

/* ----------  Express  ---------- */
const app = express();
app.use(express.json());
app.use('/shop', express.static(path.join(__dirname, 'public')));

/* GET /api/products ‚Äî —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã */
app.get('/api/products', async (_req, res) => {
  try {
    const { rows } = await pool.query(`
      SELECT article, name, size, price_rub, photo_file_id
        FROM products
       WHERE is_public = true
    `);
    res.json(rows);
  } catch (e) {
    console.error('[api/products]', e);
    res.status(500).json({ error: 'db_error' });
  }
});

/* POST /api/order ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ */
app.post('/api/order', (req, res) => {
  console.log('[ORDER]', req.body);
  res.sendStatus(200);
});

/* ----------  Telegram-–±–æ—Ç  ---------- */
const bot = new TelegramBot(TOKEN, { polling: false });
bot.setWebHook(`${URL}/bot${TOKEN}`);

/* Endpoint –¥–ª—è Webhook */
app.post(`/bot${TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

/* /start ‚ûî –∫–Ω–æ–ø–∫–∞ ¬´–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω¬ª */
bot.onText(/\/start/, msg => {
  bot.sendMessage(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –≤–∏—Ç—Ä–∏–Ω—É', web_app: { url: `${URL}/shop` } }]
      ]
    }
  });
});

/* –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã */
// (1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É: /set_price <–∞—Ä—Ç–∏–∫—É–ª> <—Ü–µ–Ω–∞>
bot.onText(/\/set_price\s+(\S+)\s+(\d+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const [ , article, price ] = match;
  try {
    await pool.query(
      'UPDATE products SET price_rub = $1 WHERE article = $2',
      [price, article]
    );
    bot.sendMessage(chatId, `–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ ${article} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${price} ‚ÇΩ`);
  } catch (e) {
    console.error('[set_price]', e);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–Ω—ã.');
  }
});

// (2) –ü–æ–º–µ—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥: /set_public <–∞—Ä—Ç–∏–∫—É–ª> on|off
bot.onText(/\/set_public\s+(\S+)\s+(on|off)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const [ , article, mode ] = match;
  const isPublic = mode === 'on';
  try {
    await pool.query(
      'UPDATE products SET is_public = $1 WHERE article = $2',
      [isPublic, article]
    );
    bot.sendMessage(
      chatId,
      `–¢–æ–≤–∞—Ä ${article} —Ç–µ–ø–µ—Ä—å ${isPublic ? '–ø—É–±–ª–∏—á–Ω—ã–π' : '—Å–∫—Ä—ã—Ç'}.`
    );
  } catch (e) {
    console.error('[set_public]', e);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞.');
  }
});

// (3) –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: /set_photo <–∞—Ä—Ç–∏–∫—É–ª>
const awaitingPhoto = new Map(); // chatId ‚Üí article
bot.onText(/\/set_photo\s+(\S+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const article = match[1];
  awaitingPhoto.set(chatId, article);
  bot.sendMessage(chatId, `–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${article}`);
});

// (4) –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –ë–î
bot.on('photo', async msg => {
  const chatId = msg.chat.id;
  if (!awaitingPhoto.has(chatId)) return;
  const article = awaitingPhoto.get(chatId);
  const photoArray = msg.photo;
  const fileId = photoArray[photoArray.length - 1].file_id; // —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π
  try {
    await pool.query(
      'UPDATE products SET photo_file_id = $1 WHERE article = $2',
      [fileId, article]
    );
    bot.sendMessage(chatId, `–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è ${article} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.`);
  } catch (e) {
    console.error('[set_photo]', e);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.');
  } finally {
    awaitingPhoto.delete(chatId);
  }
});

/* –î–∞–Ω–Ω—ã–µ –∏–∑ web-app (–∫–æ—Ä–∑–∏–Ω–∞) */
bot.on('web_app_data', ctx => {
  bot.sendMessage(
    ctx.chat.id,
    `üì¶ –í–∞—à –∑–∞–∫–∞–∑:\n${ctx.web_app_data.data}`
  );
});

/* –°—Ç–∞—Ä—Ç—É–µ–º —Å–µ—Ä–≤–µ—Ä */
app.listen(PORT, () =>
  console.log(`‚úÖ  Express & Bot listening on :${PORT}`)
);
